import os

import psycopg2
import pandas as pd
from dagster import asset, OpExecutionContext, Field, StringSource
from etl_wo.config.config import config as env_config

organizations = env_config.get("organizations", {})


@asset(
    config_schema={
        "organization": Field(StringSource, default_value="default", is_required=False)
    }
)
def sink_leave_load(context: OpExecutionContext, sick_leave_transform: dict):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã load_data_sick_leave_sheets.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É.
    """
    # –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
    table_name = "load_data_sick_leave_sheets"
    payload = sick_leave_transform.get("data")

    org = context.op_config.get("organization", "local")
    if org not in organizations:
        raise ValueError(f"–ë–∞–∑–∞ {org} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    db_config = organizations[org]

    conn = psycopg2.connect(
        dbname=db_config["dbname"],
        user=db_config["user"],
        password=db_config["password"],
        host=db_config["host"],
        port=db_config["port"]
    )
    cursor = conn.cursor()

    if payload is None or payload.empty:
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        final_count = cursor.fetchone()[0]
        context.log.info(f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}. –ò—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫: {final_count}")
        cursor.close()
        conn.close()
        return {"table_name": table_name, "status": "skipped"}

    payload.fillna("-", inplace=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –∫–æ–ª–æ–Ω–∫—É "number"
    for _, row in payload.iterrows():
        cols = list(payload.columns)
        placeholders = ', '.join(['%s'] * len(cols))
        columns_joined = ', '.join(cols)
        update_clause = ', '.join([f"{col} = EXCLUDED.{col}" for col in cols if col != "number"])
        sql = f"""
            INSERT INTO {table_name} ({columns_joined})
            VALUES ({placeholders})
            ON CONFLICT (number)
            DO UPDATE SET {update_clause};
        """
        cursor.execute(sql, tuple(row))

    conn.commit()
    cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
    final_count = cursor.fetchone()[0]
    context.log.info(f"üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è {table_name} –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫: {final_count}")
    cursor.close()
    conn.close()

    # –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    data_folder = os.path.join(os.getcwd(), "etl_wo", "data", "eln")
    if os.path.exists(data_folder):
        for f in os.listdir(data_folder):
            file_path = os.path.join(data_folder, f)
            if os.path.isfile(file_path):
                os.remove(file_path)
        context.log.info(f"üßπ –ü–∞–ø–∫–∞ {data_folder} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
    else:
        context.log.info(f"–ü–∞–ø–∫–∞ {data_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")

    return {"table_name": table_name, "status": "success"}
