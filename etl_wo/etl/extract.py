import pandas as pd
import json
import os
import fnmatch
from dagster import asset, Output, OpExecutionContext

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
MAPPING_PATH = "etl_wo/config/mapping.json"
DATA_PATH = "etl_wo/data/"

# –ó–∞–≥—Ä—É–∂–∞–µ–º mapping.json
with open(MAPPING_PATH, "r", encoding="utf-8") as f:
    mappings = json.load(f)


@asset
def extract(context: OpExecutionContext, check_db: dict, download_oms_file: str) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç CSV-—Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ data.
    –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏–∑ mapping.json –∏—â–µ—Ç —Ñ–∞–π–ª—ã –ø–æ —à–∞–±–ª–æ–Ω—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∏–º–µ–Ω–∏).
    """
    db_tables = check_db["tables"]

    data_files = os.listdir(DATA_PATH)
    if not data_files:
        raise FileNotFoundError("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ data/")

    matched_table = None
    matched_file = None

    for table_name, config in mappings["tables"].items():
        file_pattern = config.get("file", {}).get("file_pattern", "")
        file_format = config.get("file", {}).get("file_format", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ë–î
        if table_name not in db_tables:
            text_value = f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –µ—Å—Ç—å –≤ mapping.json, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î."
            context.log.info(text_value)
            print(text_value)
            continue

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—É
        matching_files = [f for f in data_files if fnmatch.fnmatch(f, f"{file_pattern}.{file_format}")]
        if matching_files:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            matched_file = sorted(matching_files)[-1]
            matched_table = table_name
            break

    if not matched_table:
        raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∞–±–ª–∏—Ü–µ –≤ mapping.json –∏ –∏–º–µ—é—â–∏–π—Å—è –≤ –ë–î")

    table_config = mappings["tables"][matched_table]
    file_path = os.path.join(DATA_PATH, matched_file)

    df = pd.read_csv(
        file_path,
        encoding=table_config["encoding"],
        delimiter=table_config["delimiter"]
    )
    text_value = f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ {matched_file}"
    context.log.info(text_value)

    print(text_value)

    return {"table_name": matched_table, "data": df}
