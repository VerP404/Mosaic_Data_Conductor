import os
import json
import fnmatch
import pandas as pd
from dagster import OpExecutionContext


def universal_extract(
        context: OpExecutionContext,
        mapping_file: str,
        data_folder: str,
        table_key: str
) -> dict:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      context: Dagster execution context
      mapping_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É mapping.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü
      data_folder: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö (CSV)
      table_key: –ö–ª—é—á —Ç–∞–±–ª–∏—Ü—ã –≤ mapping.json, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞

    –§—É–Ω–∫—Ü–∏—è:
      1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ mapping.json.
      2. –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (—à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞, —Ñ–æ—Ä–º–∞—Ç, –∫–æ–¥–∏—Ä–æ–≤–∫—É, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å).
      3. –ò—â–µ—Ç —Ñ–∞–π–ª—ã –≤ data_folder, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —à–∞–±–ª–æ–Ω—É.
      4. –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π (–ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ) —Ñ–∞–π–ª –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö.
      5. –°—á–∏—Ç—ã–≤–∞–µ—Ç CSV-—Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
      6. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ "table_name" –∏ "data" (pandas DataFrame).
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞
    if not os.path.exists(mapping_file):
        context.log.info(f"‚ùå –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ {mapping_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ {mapping_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞
    with open(mapping_file, "r", encoding="utf-8") as f:
        mappings = json.load(f)

    table_config = mappings.get("tables", {}).get(table_key)
    if not table_config:
        context.log.info(f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {mapping_file}.")
        raise ValueError(f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    file_pattern = table_config.get("file", {}).get("file_pattern", "")
    file_format = table_config.get("file", {}).get("file_format", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    if not os.path.exists(data_folder):
        context.log.info(f"‚ùå –ü–∞–ø–∫–∞ {data_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        raise FileNotFoundError(f"‚ùå –ü–∞–ø–∫–∞ {data_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    data_files = os.listdir(data_folder)
    if not data_files:
        context.log.info(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {data_folder}.")
        raise FileNotFoundError(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {data_folder}.")

    # –ò—â–µ–º —Ñ–∞–π–ª—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —à–∞–±–ª–æ–Ω—É: file_pattern.file_format
    matching_files = [
        f for f in data_files if fnmatch.fnmatch(f, f"{file_pattern}.{file_format}")
    ]
    if not matching_files:
        context.log.info(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É {file_pattern}.{file_format} –≤ {data_folder}.")
        raise ValueError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É {file_pattern}.{file_format} –≤ {data_folder}.")

    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    matched_file = sorted(matching_files)[-1]
    file_path = os.path.join(data_folder, matched_file)

    # –ß–∏—Ç–∞–µ–º CSV —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
    encoding = table_config.get("encoding", "utf-8")
    delimiter = table_config.get("delimiter", ",")
    df = pd.read_csv(
        file_path,
        encoding=encoding,
        delimiter=delimiter,
        dtype=str
    )

    text_value = f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ {matched_file}"
    context.log.info(text_value)

    return {"table_name": table_key, "data": df}
