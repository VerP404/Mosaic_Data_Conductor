import os
import time
import json
import fnmatch

from dagster import sensor, RunRequest, SkipReason
from etl_wo.jobs.kvazar import job_eln

# –ü–æ—Ä–æ–≥ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MIN_FILE_AGE_SECONDS = 60

def _load_state(context) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ cursor —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {filename: run_key}."""
    if context.cursor:
        return json.loads(context.cursor)
    return {}

def _save_state(context, state: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å {filename: run_key} –≤ cursor —Å–µ–Ω—Å–æ—Ä–∞."""
    context.update_cursor(json.dumps(state))

@sensor(job=job_eln)
def kvazar_folder_monitor_sensor(context):
    """
    –°–µ–Ω—Å–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–ø–∫–∏ DATA_FOLDER:
      - –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π Run –µ—â—ë –∏–¥—ë—Ç.
      - –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π Run —É—Å–ø–µ—à–µ–Ω ‚Äî —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª.
      - –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç.
    """
    sensor_config = context.sensor_config
    mapping_file = sensor_config["mapping_file"]
    data_folder = sensor_config["data_folder"]
    table_name = sensor_config["table_name"]
    sensor_state = _load_state(context)  # {filename: run_key}

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ mapping.json
    if not os.path.exists(mapping_file):
        context.log.info(f"‚ùå –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ {mapping_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        yield SkipReason("Mapping file not found.")
        return

    with open(mapping_file, "r", encoding="utf-8") as f:
        mapping = json.load(f)
    table_config = mapping.get("tables", {}).get(table_name)
    if not table_config:
        context.log.info(f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {mapping_file}.")
        yield SkipReason("Mapping config for table not found.")
        return

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–õ–ù_*.csv")
    file_pattern = table_config.get("file", {}).get("file_pattern", "")
    file_format = table_config.get("file", {}).get("file_format", "")
    valid_pattern = f"{file_pattern}.{file_format}"

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    if not os.path.exists(data_folder):
        context.log.info(f"‚ùå –ü–∞–ø–∫–∞ {data_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        yield SkipReason("Data folder not found.")
        return

    files = os.listdir(data_folder)
    if not files:
        context.log.info(f"üìÇ –ü–∞–ø–∫–∞ {data_folder} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∏–∫.")
        yield SkipReason("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ.")
        return

    now = time.time()
    valid_files = []
    invalid_files = []

    # 4. –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
    for file in files:
        file_path = os.path.join(data_folder, file)
        if fnmatch.fnmatch(file, valid_pattern):
            mod_time = os.path.getmtime(file_path)
            age = now - mod_time
            if age >= MIN_FILE_AGE_SECONDS:
                valid_files.append(file)
            else:
                context.log.info(f"–§–∞–π–ª {file} –µ—â—ë –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω (–≤–æ–∑—Ä–∞—Å—Ç {age:.0f} —Å–µ–∫.).")
        else:
            invalid_files.append(file)

    # 5. –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file in invalid_files:
        file_path = os.path.join(data_folder, file)
        try:
            os.remove(file_path)
            context.log.info(f"–£–¥–∞–ª—ë–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            context.log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")

    if not valid_files:
        context.log.info("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        yield SkipReason("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    # 6. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–º–æ—Ç—Ä–∏–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –æ–Ω —É–∂–µ
    for file in valid_files:
        file_path = os.path.join(data_folder, file)
        existing_run_key = sensor_state.get(file)

        if existing_run_key:
            # –ò—â–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Run, —É –∫–æ—Ç–æ—Ä–æ–≥–æ run.tags["dagster/run_key"] == existing_run_key
            runs = context.instance.get_runs()
            matching_run = None
            for r in runs:
                # !!! –í–æ—Ç –∑–¥–µ—Å—å –≥–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ: r.tags.get("dagster/run_key")
                if r.tags.get("dagster/run_key") == existing_run_key:
                    matching_run = r
                    break

            if matching_run:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã: is_finished, is_success, is_failure
                if not matching_run.is_finished:
                    # –ó–∞–ø—É—Å–∫ –µ—â—ë –∏–¥—ë—Ç
                    context.log.info(f"–§–∞–π–ª {file} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (run_key={existing_run_key}), —Å—Ç–∞—Ç—É—Å={matching_run.status}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                else:
                    # –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω
                    if matching_run.is_success:
                        # –£—Å–ø–µ—à–Ω–æ ‚Äî —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, —É–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        try:
                            os.remove(file_path)
                            context.log.info(f"–§–∞–π–ª {file} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª—ë–Ω.")
                        except Exception as e:
                            context.log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
                        del sensor_state[file]
                        continue
                    elif matching_run.is_failure:
                        context.log.warning(f"–§–∞–π–ª {file} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º.")
                        del sensor_state[file]
                    else:
                        # –ù–∞–ø—Ä–∏–º–µ—Ä, CANCELED –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã
                        context.log.warning(f"–§–∞–π–ª {file} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å–æ–º {matching_run.status}, —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º.")
                        del sensor_state[file]
            else:
                # –ù–µ –Ω–∞—à–ª–∏ Run ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, run_key —É—Å—Ç–∞—Ä–µ–ª
                context.log.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω Run c run_key={existing_run_key}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è —Ñ–∞–π–ª–∞ {file}.")
                del sensor_state[file]

        # –ï—Å–ª–∏ –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –ª–∏–±–æ —Ñ–∞–π–ª–∞ –Ω–µ –±—ã–ª–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ª–∏–±–æ –º—ã –µ–≥–æ —É–¥–∞–ª–∏–ª–∏
        if file not in sensor_state:
            new_run_key = f"{file}-{int(time.time())}"
            context.log.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ {file} c run_key={new_run_key}.")

            run_config = {
                "ops": {
                    "kvazar_extract": {
                        "config": {
                            "data_folder": data_folder,
                            "mapping_file": mapping_file,
                            "table_name": table_name,
                        }
                    }
                }
            }

            yield RunRequest(run_key=new_run_key, run_config=run_config)
            sensor_state[file] = new_run_key

    # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    _save_state(context, sensor_state)
