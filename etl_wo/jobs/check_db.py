import json
import psycopg2
from sqlalchemy import create_engine
from dagster import asset, Output, OpExecutionContext
from etl_wo.config.config import config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
organizations = config.get("organizations", {})

@asset
def check_db(context: OpExecutionContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ .env.
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "local")
    org = context.op_config.get("organization", "local")
    if org not in organizations:
        text_value = f"‚ùå –ë–∞–∑–∞ {org} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env"
        context.log.info(text_value)
        raise ValueError(text_value)

    db_config = organizations[org]

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ SQLAlchemy
    try:
        engine = create_engine(
            f"postgresql://{db_config['user']}:{db_config['password']}@{db_config['host']}:{db_config['port']}/{db_config['dbname']}"
        )
        with engine.connect() as conn:
            conn.close()
        text_value = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {org}.{db_config['dbname']} —É—Å–ø–µ—à–Ω–æ!"
        context.log.info(text_value)
        print(text_value)
    except Exception as e:
        text_value = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î {org}: {e}"
        context.log.info(text_value)
        raise ValueError(text_value)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    tables = db_config.get("tables", [])
    if not tables:
        text_value = f"‚ùå –í –ë–î {org} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü."
        context.log.info(text_value)
        raise ValueError(text_value)

    # –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    with engine.connect() as conn:
        for table in tables:
            try:
                from sqlalchemy import text
                result = conn.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
                context.log.info(f"üìã –¢–∞–±–ª–∏—Ü–∞ {table}: {result} —Å—Ç—Ä–æ–∫")
            except Exception as ex:
                context.log.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table}: {ex}")

    text_value = f"üìã –í –ë–î {org} –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}"
    context.log.info(text_value)
    return {"db_name": org, "tables": tables}
