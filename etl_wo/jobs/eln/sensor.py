import os
import time
import json
import fnmatch
from dagster import sensor, RunRequest, SkipReason

from etl_wo.jobs.eln import job_eln
from etl_wo.jobs.eln.flow_config import DATA_FOLDER, MAPPING_FILE, TABLE_NAME

# –ü–æ—Ä–æ–≥ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MIN_FILE_AGE_SECONDS = 60

def _load_state(context) -> dict:
    if context.cursor:
        return json.loads(context.cursor)
    return {}

def _save_state(context, state: dict):
    context.update_cursor(json.dumps(state))

@sensor(job=job_eln)
def eln_folder_monitor_sensor(context):
    """
    –°–µ–Ω—Å–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–ø–∫–∏ DATA_FOLDER —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è:
      1. –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (Run –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω), –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º.
      2. –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º - —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏ —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
      3. –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.
    """
    sensor_state = _load_state(context)

    if not os.path.exists(MAPPING_FILE):
        context.log.info(f"‚ùå –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ {MAPPING_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        yield SkipReason("Mapping file not found.")
        return

    with open(MAPPING_FILE, "r", encoding="utf-8") as f:
        mapping = json.load(f)
    table_config = mapping.get("tables", {}).get(TABLE_NAME)
    if not table_config:
        context.log.info(f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{TABLE_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {MAPPING_FILE}.")
        yield SkipReason("Mapping config for table not found.")
        return

    file_pattern = table_config.get("file", {}).get("file_pattern", "")
    file_format = table_config.get("file", {}).get("file_format", "")
    valid_pattern = f"{file_pattern}.{file_format}"

    if not os.path.exists(DATA_FOLDER):
        context.log.info(f"‚ùå –ü–∞–ø–∫–∞ {DATA_FOLDER} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        yield SkipReason("Data folder not found.")
        return

    files = os.listdir(DATA_FOLDER)
    if not files:
        context.log.info("üìÇ –ü–∞–ø–∫–∞ DATA_FOLDER –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∏–∫.")
        yield SkipReason("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ.")
        return

    now = time.time()
    valid_files = []
    invalid_files = []

    for file in files:
        file_path = os.path.join(DATA_FOLDER, file)
        if fnmatch.fnmatch(file, valid_pattern):
            mod_time = os.path.getmtime(file_path)
            age = now - mod_time
            if age >= MIN_FILE_AGE_SECONDS:
                valid_files.append(file)
            else:
                context.log.info(f"–§–∞–π–ª {file} –µ—â—ë –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω (–≤–æ–∑—Ä–∞—Å—Ç {age:.0f} —Å–µ–∫.).")
        else:
            invalid_files.append(file)

    for file in invalid_files:
        file_path = os.path.join(DATA_FOLDER, file)
        try:
            os.remove(file_path)
            context.log.info(f"–£–¥–∞–ª—ë–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            context.log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")

    if not valid_files:
        context.log.info("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        yield SkipReason("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    for file in valid_files:
        file_path = os.path.join(DATA_FOLDER, file)

        if file in sensor_state:
            run_id = sensor_state[file]
            run = context.instance.get_run_by_id(run_id)

            if not run:
                context.log.warning(f"Run —Å id={run_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ñ–∞–π–ª–∞ {file}")
                del sensor_state[file]
            else:
                if run.status in (
                    "NOT_STARTED", "STARTING", "QUEUED", "MANAGED", "STARTED", "CANCELING"
                ):
                    context.log.info(f"–§–∞–π–ª {file} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ run_id={run_id}, —Å—Ç–∞—Ç—É—Å={run.status}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                if run.status == "SUCCESS":
                    try:
                        os.remove(file_path)
                        context.log.info(f"–§–∞–π–ª {file} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª—ë–Ω.")
                    except Exception as e:
                        context.log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
                    del sensor_state[file]
                    continue

                if run.status in ("FAILURE", "CANCELED"):
                    context.log.warning(f"–§–∞–π–ª {file} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π (run_id={run_id}, —Å—Ç–∞—Ç—É—Å={run.status}). –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º.")
                    del sensor_state[file]

        if file not in sensor_state:
            context.log.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞: {file}")

            run_config = {
                "ops": {
                    "eln_extract": {
                        "config": {
                            "data_folder": DATA_FOLDER,
                            "mapping_file": MAPPING_FILE,
                            "table_name": TABLE_NAME,
                        }
                    }
                }
            }

            # –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º run_key –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏,
            # —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
            run_key = f"{file}-{int(time.time())}"
            run_request = RunRequest(run_key=run_key, run_config=run_config)
            yield run_request

            sensor_state[file] = run_request.run_key  # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º run_key –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, —á—Ç–æ –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω

    _save_state(context, sensor_state)
