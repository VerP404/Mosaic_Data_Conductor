import os
import time
import json
import fnmatch

from dagster import (
    sensor,
    RunRequest,
    SkipReason,
    DagsterInstance,  # –¥–ª—è get_runs
    RunStatus
)
from dagster._core.storage.pipeline_run import RunsFilter

from etl_wo.jobs.eln import job_eln
from etl_wo.jobs.eln.flow_config import DATA_FOLDER, MAPPING_FILE, TABLE_NAME

# –ü–æ—Ä–æ–≥ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MIN_FILE_AGE_SECONDS = 60


def _load_state(context) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ cursor —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {filename: run_key}."""
    if context.cursor:
        return json.loads(context.cursor)
    return {}


def _save_state(context, state: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å {filename: run_key} –≤ cursor —Å–µ–Ω—Å–æ—Ä–∞."""
    context.update_cursor(json.dumps(state))


@sensor(job=job_eln)
def eln_folder_monitor_sensor(context):
    """
    –°–µ–Ω—Å–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–ø–∫–∏ DATA_FOLDER —Å —É—á—ë—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è:
      1. –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (–∑–∞–ø—É—Å–∫ —Å run_key –µ—â—ë –∏–¥—ë—Ç), –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º.
      2. –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º ‚Äì —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏ —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
      3. –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π ‚Äì –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º (—Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π run_key).
    """

    sensor_state = _load_state(context)  # {filename: run_key}

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞
    if not os.path.exists(MAPPING_FILE):
        context.log.info(f"‚ùå –§–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ {MAPPING_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        yield SkipReason("Mapping file not found.")
        return

    import json
    with open(MAPPING_FILE, "r", encoding="utf-8") as f:
        mapping = json.load(f)
    table_config = mapping.get("tables", {}).get(TABLE_NAME)
    if not table_config:
        context.log.info(f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{TABLE_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {MAPPING_FILE}.")
        yield SkipReason("Mapping config for table not found.")
        return

    file_pattern = table_config.get("file", {}).get("file_pattern", "")
    file_format = table_config.get("file", {}).get("file_format", "")
    valid_pattern = f"{file_pattern}.{file_format}"

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
    if not os.path.exists(DATA_FOLDER):
        context.log.info(f"‚ùå –ü–∞–ø–∫–∞ {DATA_FOLDER} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        yield SkipReason("Data folder not found.")
        return

    files = os.listdir(DATA_FOLDER)
    if not files:
        context.log.info("üìÇ –ü–∞–ø–∫–∞ DATA_FOLDER –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∏–∫.")
        yield SkipReason("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ.")
        return

    now = time.time()
    valid_files = []
    invalid_files = []

    # 3. –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
    for file in files:
        file_path = os.path.join(DATA_FOLDER, file)
        if fnmatch.fnmatch(file, valid_pattern):
            mod_time = os.path.getmtime(file_path)
            age = now - mod_time
            if age >= MIN_FILE_AGE_SECONDS:
                valid_files.append(file)
            else:
                context.log.info(f"–§–∞–π–ª {file} –µ—â—ë –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω (–≤–æ–∑—Ä–∞—Å—Ç {age:.0f} —Å–µ–∫.).")
        else:
            invalid_files.append(file)

    # 4. –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file in invalid_files:
        file_path = os.path.join(DATA_FOLDER, file)
        try:
            os.remove(file_path)
            context.log.info(f"–£–¥–∞–ª—ë–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            context.log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")

    if not valid_files:
        context.log.info("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        yield SkipReason("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    # 5. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    for file in valid_files:
        file_path = os.path.join(DATA_FOLDER, file)

        if file in sensor_state:
            # –§–∞–π–ª —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏–º, —á–µ–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∑–∞–ø—É—Å–∫
            existing_run_key = sensor_state[file]
            runs = context.instance.get_runs(filters=RunsFilter(run_keys=[existing_run_key]))
            if not runs:
                # –ù–µ –Ω–∞—à–ª–∏ run —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —É–±–∏—Ä–∞–µ–º –∫–ª—é—á –∏ –¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫
                context.log.warning(f"–ù–µ –Ω–∞—à–ª–∏ Run c run_key={existing_run_key}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è —Ñ–∞–π–ª–∞ {file}.")
                del sensor_state[file]
            else:
                run = runs[-1]  # –æ–±—ã—á–Ω–æ –±—É–¥–µ—Ç –æ–¥–∏–Ω, –Ω–æ –≤–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
                status = run.status
                context.log.info(f"–§–∞–π–ª={file}, run_key={existing_run_key}, status={status}.")

                if status in (RunStatus.NOT_STARTED, RunStatus.STARTING, RunStatus.QUEUED, RunStatus.STARTED, RunStatus.MANAGED, RunStatus.CANCELING):
                    # –ó–∞–ø—É—Å–∫ –µ—â—ë –∏–¥—ë—Ç ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue

                if status == RunStatus.SUCCESS:
                    # –£—Å–ø–µ—à–Ω–æ ‚Äì —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    try:
                        os.remove(file_path)
                        context.log.info(f"–§–∞–π–ª {file} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª—ë–Ω.")
                    except Exception as e:
                        context.log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
                    del sensor_state[file]
                    continue

                if status in (RunStatus.FAILURE, RunStatus.CANCELED):
                    # –û—à–∏–±–∫–∞ ‚Äì —É–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫
                    context.log.warning(f"–§–∞–π–ª {file} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π. –ë—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞.")
                    del sensor_state[file]

        # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç:
        # - —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ sensor_state
        # –ò–õ–ò
        # - –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–¥–∞–ª–∏–ª–∏ –µ–≥–æ –æ—Ç—Ç—É–¥–∞ (–æ—à–∏–±–∫–∞ –∏–ª–∏ run –Ω–µ –Ω–∞–π–¥–µ–Ω)
        if file not in sensor_state:
            new_run_key = f"{file}-{int(time.time())}"
            context.log.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ {file} c run_key={new_run_key}.")

            run_config = {
                "ops": {
                    "eln_extract": {
                        "config": {
                            "data_folder": DATA_FOLDER,
                            "mapping_file": MAPPING_FILE,
                            "table_name": TABLE_NAME,
                        }
                    }
                }
            }

            yield RunRequest(
                run_key=new_run_key,
                run_config=run_config
            )
            # –ó–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –±—ã–ª –∑–∞–ø—É—Å–∫
            sensor_state[file] = new_run_key

    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    _save_state(context, sensor_state)
