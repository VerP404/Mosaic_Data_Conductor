# import os
# import json
# import fnmatch
# import pandas as pd
# from dagster import asset, OpExecutionContext
#
# @asset
# def sick_leave_extract(context: OpExecutionContext) -> dict:
#     """
#     –ò–∑–≤–ª–µ–∫–∞–µ—Ç CSV-—Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ etl_wo/data/eln –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã load_data_sick_leave_sheets.
#     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ mapping.json –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ñ–∞–π–ª–∞, –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.
#     """
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
#     mapping_path = os.path.join("etl_wo", "config", "mapping.json")
#     data_folder = os.path.join("etl_wo", "data", "eln")
#
#     # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞
#     with open(mapping_path, "r", encoding="utf-8") as f:
#         mappings = json.load(f)
#
#     table_key = "load_data_sick_leave_sheets"
#     table_config = mappings["tables"].get(table_key)
#     if not table_config:
#         context.log.info(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_key} –≤ mapping.json")
#         raise ValueError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_key} –≤ mapping.json")
#
#     # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞
#     file_pattern = table_config.get("file", {}).get("file_pattern", "")
#     file_format = table_config.get("file", {}).get("file_format", "")
#
#     if not os.path.exists(data_folder):
#         context.log.info(f"‚ùå –ü–∞–ø–∫–∞ {data_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#         raise FileNotFoundError(f"‚ùå –ü–∞–ø–∫–∞ {data_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#
#     data_files = os.listdir(data_folder)
#     if not data_files:
#         context.log.info(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {data_folder}.")
#         raise FileNotFoundError(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {data_folder}.")
#
#     # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–õ–ù_*" + ".csv")
#     matching_files = [f for f in data_files if fnmatch.fnmatch(f, f"{file_pattern}.{file_format}")]
#     if not matching_files:
#         context.log.info(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É {file_pattern}.{file_format} –≤ {data_folder}.")
#         raise ValueError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É {file_pattern}.{file_format} –≤ {data_folder}.")
#
#     # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∏–º–µ–Ω–∏)
#     matched_file = sorted(matching_files)[-1]
#     file_path = os.path.join(data_folder, matched_file)
#
#     # –ß–∏—Ç–∞–µ–º CSV —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
#     df = pd.read_csv(
#         file_path,
#         encoding=table_config.get("encoding", "utf-8"),
#         delimiter=table_config.get("delimiter", ","),
#         dtype=str
#     )
#
#     context.log.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ {matched_file}")
#     return {"table_name": table_key, "data": df}
from dagster import asset, Field, String, OpExecutionContext, AssetIn

from etl_wo.jobs.eln.flow_config import MAPPING_FILE, DATA_FOLDER, TABLE_NAME


@asset(
    config_schema={
        "mapping_file": Field(String, default_value=MAPPING_FILE),
        "data_folder": Field(String, default_value=DATA_FOLDER),
        "table_name": Field(String, default_value=TABLE_NAME),
    },
    ins={"eln_db_check": AssetIn()}
)
def eln_extract(context: OpExecutionContext, eln_db_check: dict) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç CSV-—Ñ–∞–π–ª –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã.
    –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ db_check).
    –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Dagster.
    """

    config = context.op_config
    mapping_file = config["mapping_file"]
    data_folder = config["data_folder"]
    table_name = config["table_name"]

    from etl_wo.common.universal_extract import universal_extract
    result = universal_extract(context, mapping_file, data_folder, table_name)
    return result
